{"version":3,"file":"index.cjs","sources":["../src/constants.ts","../src/utils/check.ts","../src/utils/array.ts","../src/utils/clone.ts","../src/utils/object.ts","../src/utils/options.ts","../src/module.ts","../src/presets.ts"],"sourcesContent":["export enum PriorityName {\n    LEFT = 'left',\n    RIGHT = 'right',\n}\n","export function isObject(item: unknown) : item is Record<string, any> {\n    return (\n        !!item &&\n        typeof item === 'object' &&\n        !Array.isArray(item)\n    );\n}\n\nexport function isSafeKey(key: string) : boolean {\n    return key !== '__proto__' &&\n        key !== 'prototype' &&\n        key !== 'constructor';\n}\n\nexport function isEqual(x: any, y: any): boolean {\n    if (Object.is(x, y)) return true;\n\n    if (x instanceof Date && y instanceof Date) {\n        return x.getTime() === y.getTime();\n    }\n\n    if (x instanceof RegExp && y instanceof RegExp) {\n        return x.toString() === y.toString();\n    }\n\n    if (\n        isObject(x) &&\n        isObject(y)\n    ) {\n        const keysX = Reflect.ownKeys(x) as string[];\n        const keysY = Reflect.ownKeys(y) as string[];\n        if (keysX.length !== keysY.length) {\n            return false;\n        }\n\n        for (let i = 0; i < keysX.length; i++) {\n            const key = keysX[i];\n            if (!Reflect.has(y, key) || !isEqual(x[key], y[key])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    if (\n        Array.isArray(x) &&\n        Array.isArray(y)\n    ) {\n        if (x.length !== y.length) {\n            return false;\n        }\n\n        for (let i = 0; i < x.length; i++) {\n            if (!isEqual(x[i], y[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n","import { isEqual } from './check';\n\nexport function distinctArray<T = any>(arr: T[]) : T[] {\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = arr.length - 1; j > i; j--) {\n            if (isEqual(arr[i], arr[j])) {\n                arr.splice(j, 1);\n            }\n        }\n    }\n\n    return arr;\n}\n","import { isObject } from './check';\n\n/* istanbul ignore next */\nconst gT = (() => {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof self !== 'undefined') {\n        // eslint-disable-next-line no-restricted-globals\n        return self;\n    }\n\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n\n    throw new Error('unable to locate global object');\n})();\n\nexport function polyfillClone<T>(input: T) {\n    const map = new WeakMap();\n\n    const fn = <A>(value: A) : A => {\n        if (Array.isArray(value)) {\n            if (map.has(value)) {\n                return map.get(value);\n            }\n\n            const cloned = [] as A;\n            map.set(value, cloned);\n\n            value.map((el) => (cloned as any[]).push(fn(el)));\n\n            return cloned;\n        }\n\n        if (isObject(value)) {\n            if (map.has(value)) {\n                return map.get(value);\n            }\n\n            const output = {} as A;\n            const keys = Object.keys(value);\n\n            map.set(value, output);\n            for (let i = 0; i < keys.length; i++) {\n                output[keys[i] as keyof A] = fn(value[keys[i]]);\n            }\n\n            return output;\n        }\n\n        return value;\n    };\n\n    return fn(input);\n}\n\n/* istanbul ignore next */\nexport function clone<T>(value: T) : T {\n    if (gT.structuredClone) {\n        return gT.structuredClone(value);\n    }\n\n    /* istanbul ignore next */\n    return polyfillClone(value);\n}\n","// eslint-disable-next-line @typescript-eslint/ban-types\nexport function hasOwnProperty<X extends {}, Y extends PropertyKey>(obj: X, prop: Y): obj is X & Record<Y, unknown> {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","import { PriorityName } from '../constants';\nimport type { Options, OptionsInput } from '../type';\n\nexport function buildOptions(options?: OptionsInput) : Options {\n    options = options || {};\n\n    options.array = options.array ?? true;\n    options.arrayDistinct = options.arrayDistinct ?? false;\n    options.clone = options.clone ?? false;\n    options.inPlace = options.inPlace ?? false;\n    options.priority = options.priority || PriorityName.LEFT;\n\n    return options as Options;\n}\n","import { PriorityName } from './constants';\nimport type {\n    Merger, MergerContext,\n    MergerResult,\n    MergerSource,\n    MergerSourceUnwrap,\n    OptionsInput,\n} from './type';\n\nimport {\n    buildOptions,\n    clone,\n    distinctArray,\n    hasOwnProperty,\n    isObject,\n    isSafeKey,\n} from './utils';\n\nfunction baseMerger<B extends MergerSource[]>(\n    context: MergerContext,\n    ...sources: B\n) : MergerResult<B> {\n    let target : MergerSourceUnwrap<B>;\n    let source : MergerSourceUnwrap<B> | undefined;\n    if (context.options.priority === PriorityName.RIGHT) {\n        target = sources.pop() as MergerSourceUnwrap<B>;\n        source = sources.pop() as MergerSourceUnwrap<B>;\n    } else {\n        target = sources.shift() as MergerSourceUnwrap<B>;\n        source = sources.shift() as MergerSourceUnwrap<B>;\n    }\n\n    if (!source) {\n        if (\n            Array.isArray(target) &&\n            context.options.arrayDistinct\n        ) {\n            return distinctArray(target) as MergerResult<B>;\n        }\n\n        return target as MergerResult<B>;\n    }\n\n    if (\n        Array.isArray(target) &&\n        Array.isArray(source)\n    ) {\n        target.push(...source as MergerSource[]);\n\n        if (context.options.priority === PriorityName.RIGHT) {\n            return baseMerger(\n                context,\n                ...sources,\n                target,\n            ) as MergerResult<B>;\n        }\n\n        return baseMerger(\n            context,\n            target,\n            ...sources,\n        ) as MergerResult<B>;\n    }\n\n    context.map.set(source, true);\n\n    if (\n        isObject(target) &&\n        isObject(source)\n    ) {\n        const keys = Object.keys(source);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i] as (keyof MergerSourceUnwrap<B>);\n\n            if (hasOwnProperty(target, key)) {\n                if (!isSafeKey(key as string)) {\n                    continue;\n                }\n\n                if (context.options.strategy) {\n                    const applied = context.options.strategy(target, key as string, source[key]);\n                    if (typeof applied !== 'undefined') {\n                        continue;\n                    }\n                }\n\n                if (\n                    isObject(target[key]) &&\n                    isObject(source[key])\n                ) {\n                    if (context.map.has(source[key])) {\n                        const sourceKeys = Object.keys(source[key] as Record<string, any>);\n                        for (let j = 0; j < sourceKeys.length; j++) {\n                            if (\n                                isSafeKey(sourceKeys[j]) &&\n                                !hasOwnProperty(target[key] as Record<string, any>, sourceKeys[j])\n                            ) {\n                                (target[key] as Record<string, any>)[sourceKeys[j]] = (source[key] as Record<string, any>)[sourceKeys[j]];\n                            }\n                        }\n\n                        continue;\n                    }\n\n                    if (context.options.priority === PriorityName.RIGHT) {\n                        target[key] = baseMerger(\n                            context,\n                            source[key] as MergerSource,\n                            target[key] as MergerSource,\n                        ) as MergerSourceUnwrap<B>[keyof MergerSourceUnwrap<B>];\n                    } else {\n                        target[key] = baseMerger(\n                            context,\n                            target[key] as MergerSource,\n                            source[key] as MergerSource,\n                        ) as MergerSourceUnwrap<B>[keyof MergerSourceUnwrap<B>];\n                    }\n\n                    continue;\n                }\n\n                if (\n                    context.options.array &&\n                    Array.isArray(target[key]) &&\n                    Array.isArray(source[key])\n                ) {\n                    switch (context.options.priority) {\n                        case PriorityName.LEFT:\n                            Object.assign(target, {\n                                [key]: baseMerger(context, target[key] as MergerSource, source[key] as MergerSource),\n                            });\n                            break;\n                        case PriorityName.RIGHT:\n                            Object.assign(target, {\n                                [key]: baseMerger(context, source[key] as MergerSource, target[key] as MergerSource),\n                            });\n                            break;\n                    }\n                }\n            } else {\n                Object.assign(target, {\n                    [key]: source[key],\n                });\n            }\n        }\n    }\n\n    context.map = new WeakMap();\n\n    if (context.options.priority === PriorityName.RIGHT) {\n        return baseMerger(context, ...sources, target) as MergerResult<B>;\n    }\n\n    return baseMerger(context, target, ...sources) as MergerResult<B>;\n}\n\nexport function createMerger(input?: OptionsInput) : Merger {\n    const options = buildOptions(input);\n\n    return <B extends MergerSource[]>(\n        ...sources: B\n    ) : MergerResult<B> => {\n        if (!sources.length) {\n            throw new SyntaxError('At least one input element is required.');\n        }\n\n        const ctx : MergerContext = {\n            options,\n            map: new WeakMap<any, any>(),\n        };\n\n        if (options.clone) {\n            return baseMerger(ctx, ...clone(sources));\n        }\n\n        if (!options.inPlace) {\n            if (options.priority === PriorityName.LEFT) {\n                if (Array.isArray(sources[0])) {\n                    sources.unshift([]);\n                } else {\n                    sources.unshift({});\n                }\n            } else if (Array.isArray(sources[0])) {\n                sources.push([]);\n            } else {\n                sources.push({});\n            }\n        }\n\n        return baseMerger(ctx, ...sources);\n    };\n}\n\nexport const merge = createMerger();\n","import { createMerger } from './module';\nimport type { MergerResult } from './type';\n\n/**\n * Assign source attributes to a target object.\n *\n * @param target\n * @param sources\n */\nexport function assign<A extends Record<string, any>, B extends Record<string, any>[]>(\n    target: A,\n    ...sources: B\n) : A & MergerResult<B> {\n    return createMerger({\n        inPlace: true,\n        priority: 'left',\n        array: false,\n    })(target, ...sources) as A & MergerResult<B>;\n}\n"],"names":["PriorityName","LEFT","RIGHT","isObject","item","Array","isArray","isSafeKey","key","isEqual","x","y","Object","is","Date","getTime","RegExp","toString","keysX","Reflect","ownKeys","keysY","length","i","has","distinctArray","arr","j","splice","gT","globalThis","self","window","global","Error","polyfillClone","input","map","WeakMap","fn","value","get","cloned","set","el","push","output","keys","clone","structuredClone","hasOwnProperty","obj","prop","prototype","call","buildOptions","options","array","arrayDistinct","inPlace","priority","baseMerger","context","sources","target","source","pop","shift","strategy","applied","sourceKeys","assign","createMerger","SyntaxError","ctx","unshift","merge"],"mappings":"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